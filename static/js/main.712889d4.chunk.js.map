{"version":3,"sources":["Card.jsx","List.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","draggable","onDragStart","e","id","text","onClick","onCardDelete","defaultProps","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","card_text","handleChange","bind","assertThisInitialized","event","setState","target","value","_this2","cards","data","onDelete","title","onDragOver","onDrop","onDragDrop","map","card","src_Card_0","key","onSubmit","onCardSubmit","type","placeholder","onChange","React","Component","storageName","App","appData","JSON","parse","localStorage","getItem","lists","list_id","list_name","handleDragStart","handleDragOver","handleDragDrop","handleSubmit","handleCardSubmit","handleListDelete","handleCardDelete","setItem","stringify","dataTransfer","setData","preventDefault","listId","newState","objectSpread","getData","newCard","push","Math","random","toString","substring","filter","list","List_List","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.712889d4.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className=\"list-item-card\" \n\t\t\tdraggable\n\t\t\tonDragStart={(e) => {props.onDragStart(e, props.id)}}\n\t\t>\n\t\t\t{props.text}\n\n\t\t\t<div \n\t\t\t\tclassName=\"delete-button\"\n\t\t\t\tonClick={(e) => props.onCardDelete(e, props.id)}\n\t\t\t>&times;</div>\n\t\t</div>\n\t);\n}\n\nCard.defaultProps = {\n\ttext: '',\n\tid: null,\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './List.css';\n\nexport default class List extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\t'card_text': ''\n\t\t}\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({\n\t\t\tcard_text: event.target.value\n\t\t});\n\t}\n\n\trender() {\n\t\tconst cards = this.props.data.cards || [];\n\n    \treturn (\n\t\t\t<div className=\"list-item-box\">\n\t\t\t\t<div className=\"delete-button\" onClick={() => this.props.onDelete(this.props.data.id)}>&times;</div>\n\t\t\t\t<div className=\"title\">{this.props.data.title}</div>\n\n\t\t\t\t<div className=\"cards\" \n\t\t\t\t\tonDragOver={this.props.onDragOver}\n\t\t\t\t\tonDrop={(e) => this.props.onDragDrop(e, this.props.data.id)}\n\t\t\t\t>\n\t\t\t\t\t{cards.map(card => {\n\t\t\t\t\t\treturn <Card \n\t\t\t\t\t\t\tkey={card.id} \n\t\t\t\t\t\t\ttext={card.text} \n\t\t\t\t\t\t\tid={card.id} \n\t\t\t\t\t\t\tonCardDelete={this.props.onCardDelete}\n\t\t\t\t\t\t\tonDragStart={this.props.onDragStart} />\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\n\t\t\t\t<form onSubmit={(e) => {\n\t\t\t\t\tthis.props.onCardSubmit(e, this.props.data.id, this.state.card_text)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcard_text: ''\n\t\t\t\t\t});\n\t\t\t\t}}>\n\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\tplaceholder=\"Add a new card\"\n\t\t\t\t\t\tclassName=\"card-input\"\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tvalue={this.state.card_text}\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t</div>\n    \t);\n    }\n}","import React from 'react';\nimport List from './List'\nimport './App.css';\n\nconst storageName = 'react_projman';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let appData;\n\n    try {\n      appData = JSON.parse(localStorage.getItem(storageName));\n    } catch(e) {}\n\n    if(!appData || typeof appData !== 'object') {\n      appData = {\n        lists: [\n          {\n            id: 'todo',\n            title: 'TODO'\n          },\n          {\n            id: 'done',\n            title: 'DONE'\n          }\n        ],\n        cards: [\n          {\n            list_id: 'todo',\n            id: 'todofirst',\n            text: 'lorem ipsum'\n          }\n        ]\n      };\n    }\n\n    this.state = {\n      list_name: '',\n      appData: appData\n    };\n\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.handleDragOver = this.handleDragOver.bind(this);\n    this.handleDragDrop = this.handleDragDrop.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCardSubmit = this.handleCardSubmit.bind(this);\n    this.handleListDelete = this.handleListDelete.bind(this);\n    this.handleCardDelete = this.handleCardDelete.bind(this);\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(storageName, JSON.stringify(this.state.appData));\n  }\n\n  handleDragStart(event, id) {\n    event.dataTransfer.setData(\"id\", id);\n  }\n\n  handleDragOver(event) {\n    event.preventDefault();\n  }\n\n  handleDragDrop(event, listId) {\n    const newState = {...this.state};\n    const id = event.dataTransfer.getData('id');\n\n    newState.appData.cards = newState.appData.cards.map((card) => {\n      if(card.id !== id) {\n        return card;\n      } else {\n        const newCard = {...card};\n        newCard.list_id = listId;\n        return newCard;\n      }\n    });\n\n    this.setState(newState);\n  }\n\n  handleChange(event) {\n    const newState = {...this.state};\n    newState.list_name = event.target.value;\n    this.setState(newState);\n  }\n\n  handleCardSubmit(event, listId, text) {\n    event.preventDefault();\n\n    const newState = {...this.state};\n\n    newState.appData.cards.push({\n      list_id: listId,\n      id: Math.random().toString(36).substring(7),\n      text: text\n    });\n\n    this.setState(newState);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const newState = {...this.state};\n\n    newState.appData.lists.push({\n      id: Math.random().toString(36).substring(7),\n      title: newState.list_name\n    });\n\n    newState.list_name = '';\n    this.setState(newState);\n  }\n\n  handleListDelete(id) {\n    const newState = {...this.state};\n    \n    newState.appData.lists = newState.appData.lists.filter((list) => {\n      return list.id !== id;\n    });\n\n    newState.appData.cards = newState.appData.cards.filter((card) => {\n      return card.list_id !== id;\n    });\n\n    this.setState(newState);\n  }\n\n  handleCardDelete(event, id) {\n    const newState = {...this.state};\n    \n    newState.appData.cards = newState.appData.cards.filter((card) => {\n      return card.id !== id;\n    });\n\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\"\n            placeholder=\"Add a new list\"\n            className=\"list-name-input\"\n            onChange={this.handleChange}\n            value={this.state.list_name}\n          />\n        </form>\n\n        <div className=\"list-output\">\n          {this.state.appData.lists.map((list) => {\n            list.cards = this.state.appData.cards.filter((card) => {\n              return card.list_id === list.id;\n            });\n\n            return (\n              <List \n              key={list.id} data={list}\n              onCardSubmit={this.handleCardSubmit}\n              onCardDelete={this.handleCardDelete}\n              onDelete={this.handleListDelete}\n              onDragOver={this.handleDragOver}\n              onDragStart={this.handleDragStart}\n              onDragDrop={this.handleDragDrop}\n              />\n            );\n            })}\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}